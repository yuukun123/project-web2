function toggleMenu(hamburger) {
    const mobileMenu = document.getElementById('mobileMenu');
    mobileMenu.classList.toggle('active');
    
    // Toggle active class for both hamburger icons
    document.querySelectorAll('.hamburger').forEach(icon => {
        icon.classList.toggle('active');
    });
}

const logo = document.querySelector('.logo');
logo.addEventListener('click', function(e) {

    e.preventDefault();
    window.location.href = '/project-web2/home'; 
});

function myFunction() {
    const input = document.getElementById('search');
    // Add your search functionality here
}

document.addEventListener("DOMContentLoaded", function () {
    const blurOverlay = document.querySelector(".blur-overlay");
    const btnCart = document.querySelectorAll(".add-to-cart"); // N√∫t th√™m s·∫£n ph·∫©m
    const shoppingCart = document.querySelector(".shopping-cart"); // C·ª≠a s·ªï gi·ªè h√†ng
    const cartBtn = document.getElementById("cart-btn"); // N√∫t m·ªü gi·ªè h√†ng
    const closeBtns = document.querySelectorAll(".close");
    const loginBtn = document.getElementById("login-btn");
    const logoutBtn = document.getElementById("logout-btn");
    const cartCount = document.querySelector(".cart-count");

    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p t·ª´ session
    function checkLoginStatus(callback) {
        fetch("includes/session.php", {
            method: "GET",
            credentials: "include"
        })
        .then(response => response.json())
        .then(data => {
            console.log("Session Data:", data);
            if (data.loggedIn) {
                document.body.classList.add("logged-in");
            } else {
                document.body.classList.remove("logged-in");
            }
            updateUI();
            if (callback) callback(data.loggedIn);
        })
        .catch(error => console.error("L·ªói ki·ªÉm tra session:", error));
    }

    // C·∫≠p nh·∫≠t giao di·ªán ƒëƒÉng nh·∫≠p
    function updateUI() {
        const isLoggedIn = document.body.classList.contains("logged-in");
        if (loginBtn) loginBtn.style.display = isLoggedIn ? "none" : "inline-block";
        if (logoutBtn) logoutBtn.style.display = isLoggedIn ? "inline-block" : "none";
    }

    // Khi nh·∫•n n√∫t m·ªü gi·ªè h√†ng
    if (cartBtn) {
        cartBtn.addEventListener("click", () => {
            checkLoginStatus((isLoggedIn) => {
                if (isLoggedIn) {
                    fetchCart(); // Load gi·ªè h√†ng t·ª´ database
                    shoppingCart.classList.add("active");
                    if (blurOverlay) blurOverlay.classList.add("active");
                } else {
                    alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng!");
                    window.location.href = "login";
                }
            });
        });
    }

    // Khi nh·∫•n n√∫t ƒë√≥ng gi·ªè h√†ng
    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("close")) {
            shoppingCart.classList.remove("active");
            if (blurOverlay) blurOverlay.classList.remove("active");
            console.log("ƒê√≥ng gi·ªè h√†ng");
        }
    });
    

    // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (tr√™n trang s·∫£n ph·∫©m)
    btnCart.forEach(button => {
        button.addEventListener("click", function (event) {
            event.stopPropagation();
            checkLoginStatus((isLoggedIn) => {
                if (!isLoggedIn) {
                    alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
                    window.location.href = "login";
                } else {
                    let productId = this.getAttribute("data-id");
                    if (!productId) {
                        alert("L·ªói: Kh√¥ng t√¨m th·∫•y ID s·∫£n ph·∫©m!");
                        return;
                    }
                    addToCart(productId);
                }
            });
        });
    });

    // H√†m th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    function addToCart(productId) {
        console.log("ƒêang g·ª≠i request th√™m s·∫£n ph·∫©m:", productId);
        fetch("includes/cart_action.php", {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ action: "add", product_id: parseInt(productId) })
        })
        .then(response => response.json())
        .then(data => {
            console.log("Response t·ª´ server:", data);
            if (data.success) {
                alert("ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
                fetchCart();
                updateCartCount();
            } else {
                alert("L·ªói: " + data.message);
            }
        })
        .catch(error => console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error));
    }

    // H√†m x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    function removeFromCart(productId) {
        fetch("includes/cart_action.php", {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ action: "remove", product_id: productId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                fetchCart();
                updateCartCount();
            } else {
                alert("L·ªói khi x√≥a s·∫£n ph·∫©m: " + data.message);
            }
        })
        .catch(error => console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error));
    }

    // üîΩ Gi·∫£m s·ªë l∆∞·ª£ng ho·∫∑c tƒÉng s·ªë l∆∞·ª£ng khi nh·∫•n n√∫t
    function updateQuantity(productId, change) {
        let inputField = document.getElementById(`quantity_${productId}`);
        let newQuantity = parseInt(inputField.value) + change;
    
        if (newQuantity < 1) newQuantity = 1;
    
        inputField.value = newQuantity;
        sendUpdateRequest(productId, newQuantity);
        updateTotalPrice(); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ngay l·∫≠p t·ª©c
    }
    

    // ‚úè Nh·∫≠p tr·ª±c ti·∫øp s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    function updateQuantityDirectly(productId, value) {
        let newQuantity = parseInt(value);
    
        if (isNaN(newQuantity) || newQuantity < 1) {
            newQuantity = 1;
        }
    
        document.getElementById(`quantity_${productId}`).value = newQuantity;
        sendUpdateRequest(productId, newQuantity);
        updateTotalPrice(); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ngay l·∫≠p t·ª©c
    }
    

    // üì° G·ª≠i AJAX c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    function sendUpdateRequest(productId, quantity) {
        fetch("includes/cart_action.php", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({
                action: "update",
                product_id: productId,
                quantity: quantity
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                fetchCart(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch gi·ªè h√†ng
                updateCartCount(); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr√™n icon gi·ªè h√†ng
                updateTotalPrice(); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ngay l·∫≠p t·ª©c
            } else {
                alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t gi·ªè h√†ng!");
            }
        })
        .catch(error => console.error("L·ªói:", error));
    }
    
    function updateTotalPrice() {
        let totalPrice = 0;
        document.querySelectorAll(".cart-item").forEach(item => {
            let price = parseFloat(item.querySelector(".item-price").textContent.replace("‚Ç´", "").replace(",", "").trim());
            let quantity = parseInt(item.querySelector(".quantity-input").value);
            totalPrice += price * quantity;
        });
    
        // C·∫≠p nh·∫≠t v√†o giao di·ªán
        const totalElement = document.querySelector(".cart-total .total-amount");
        if (totalElement) {
            totalElement.textContent = totalPrice.toLocaleString() + " ‚Ç´";
        }
    }
    

    // H√†m l·∫•y danh s√°ch gi·ªè h√†ng
    function fetchCart() {
        fetch("includes/cart.php", {
            method: "GET",
            credentials: "include"
        })
        .then(response => response.text())
        .then(data => {
            console.log("D·ªØ li·ªáu gi·ªè h√†ng nh·∫≠n ƒë∆∞·ª£c:", data);
            const cartContent = document.querySelector(".cart-scroll"); // Ch·ªâ c·∫≠p nh·∫≠t n·ªôi dung s·∫£n ph·∫©m
            if (cartContent) {
                if (data.includes("empty-cart")) { // Ki·ªÉm tra n·∫øu c√≥ n·ªôi dung r·ªóng t·ª´ PHP
                    cartContent.innerHTML = `
                        <div class="emptyCart">
                            <div class="close-icon"> <ion-icon name="alert-circle-outline"></ion-icon> </div>
                            <p class="empty-cart">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</p>
                        </div>
                    `;
                }
                else {
                    // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m m√† kh√¥ng ·∫£nh h∆∞·ªüng n√∫t ƒë√≥ng
                    cartContent.innerHTML = data;
                }
            } else {
                console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ .cart-content tr√™n trang!");
            }
    
            // Hi·ªÉn th·ªã gi·ªè h√†ng v√† l·ªõp m·ªù n·∫øu ch∆∞a hi·ªÉn th·ªã
            shoppingCart.classList.add("active");
            if (blurOverlay) blurOverlay.classList.add("active");
        })
        .catch(error => console.error("L·ªói khi fetch gi·ªè h√†ng:", error));
    }
    

    // H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr√™n icon gi·ªè h√†ng
    function updateCartCount() {
        fetch("includes/cart_action.php?cart_count=1", {
            method: "GET",
            credentials: "include"
        })
        .then(response => response.json())
        .then(data => {
            console.log("S·ªë l∆∞·ª£ng gi·ªè h√†ng:", data.count);
            if (cartCount) {
                cartCount.textContent = data.count || 0;
            }
        })
        .catch(error => console.error("L·ªói khi l·∫•y s·ªë l∆∞·ª£ng gi·ªè h√†ng:", error));
    }

    window.addEventListener("pageshow", function (event) {
        if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
            location.reload();
        }
    });
    

    // Khi trang t·∫£i xong, ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng
    checkLoginStatus();
    updateCartCount();
    window.updateQuantity = updateQuantity;
    window.removeFromCart = removeFromCart;
    window.updateQuantityDirectly = updateQuantityDirectly;
    

    // search product
    const searchInputs = document.querySelectorAll(".search-input");
    const searchButtons = document.querySelectorAll(".searchBtn");

    // H√†m t√¨m ki·∫øm s·∫£n ph·∫©m (gi·ªØ nguy√™n n·∫øu c·∫ßn)
    function searchItems(searchTerm) {
        let allProducts = document.querySelectorAll("#product-container .movie-item");
        if (searchTerm.trim() === "") {
            allProducts.forEach(product => product.style.display = "block");
            return;
        }
        let found = false;
        allProducts.forEach(product => {
            let productName = product.querySelector(".title").innerText.toLowerCase();
            if (productName.includes(searchTerm.toLowerCase())) {
                product.style.display = "block";
                found = true;
            } else {
                product.style.display = "none";
            }
        });
        if (!found) {
            document.getElementById("product-container").innerHTML = "<p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o!</p>";
        }
    }

    let isSelectingHint = false;
    // H√†m hi·ªÉn th·ªã g·ª£i √Ω t√¨m ki·∫øm
    function showHints(inputField) {
        const searchTerm = inputField.value.trim();
        const hintContainer = inputField.closest(".search-container").querySelector(".hint-container");

        if (!searchTerm) {
            hintContainer.innerHTML = "";
            hintContainer.style.display = "none";
            return;
        }

        fetch(`pages/getAllProduct.php?term=${encodeURIComponent(searchTerm)}`)
            .then(response => response.json())
            .then(products => {
                hintContainer.innerHTML = "";
                if (!products || products.length === 0) {
                    hintContainer.style.display = "none";
                    return;
                }

                products.forEach(item => {
                    const hintItem = document.createElement("div");
                    hintItem.className = "hint-item";
                    // S·ª≠ d·ª•ng dataset ƒë·ªÉ l∆∞u product_id
                    hintItem.dataset.productId = item.product_id;
                    hintItem.innerHTML = `
                        <img src="${item.image}" alt="${item.product_name}" style="width:30px; height:30px; margin-right:10px;">
                        ${item.product_name}
                    `;

                    // D√πng mousedown ƒë·ªÉ tr√°nh m·∫•t focus tr∆∞·ªõc khi x·ª≠ l√Ω
                    hintItem.addEventListener("mousedown", function (event) {
                        event.preventDefault(); // NgƒÉn tr√¨nh duy·ªát hi·ªÉu l√† nh·∫•p ra ngo√†i input
                        isSelectingHint = true;
                    });

                    hintItem.addEventListener("click", function () {
                        isSelectingHint = false; // Reset bi·∫øn
                        console.log(item.product_id);
                        window.location.href = `home?pages=product&id=${item.product_id}`;
                    });                    

                    hintContainer.appendChild(hintItem);
                });

                hintContainer.style.display = "block";
            })
            .catch(error => console.error("L·ªói khi l·∫•y g·ª£i √Ω:", error));
    }

    let inputTimeout = null; // Bi·∫øn l∆∞u b·ªô ƒë·∫øm th·ªùi gian
    // G√°n s·ª± ki·ªán cho t·ª´ng √¥ t√¨m ki·∫øm
    searchInputs.forEach(input => {
        input.addEventListener("input", function () {
        
            if (event.data === " ") return;

            clearTimeout(inputTimeout); // X√≥a b·ªô ƒë·∫øm th·ªùi gian tr∆∞·ªõc ƒë√≥
            const searchField = this;
            
            inputTimeout = setTimeout(() => {
                showHints(searchField); // G·ªçi h√†m hi·ªÉn th·ªã hint sau khi ng∆∞·ªùi d√πng ng·ª´ng nh·∫≠p
            }, 500); // Ch·ªù 500ms sau khi ng·ª´ng nh·∫≠p m·ªõi g·ªçi API
            
            if (this.value.trim() === "") {
                console.log("√î t√¨m ki·∫øm tr·ªëng - ƒêang t·∫£i l·∫°i danh s√°ch s·∫£n ph·∫©m g·ªëc...");
                // N·∫øu c√≥ h√†m loadAllProducts(), g·ªçi ·ªü ƒë√¢y
                loadAllProducts();
            }
        });

        input.addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                searchItems(this.value);
            }
        });

        input.addEventListener("blur", function () {
            setTimeout(() => {
                if (!isSelectingHint) {
                    this.closest(".search-container").querySelector(".hint-container").style.display = "none";
                }
                isSelectingHint = false;
            }, 200); // ƒê·ª£i 200ms ƒë·ªÉ ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ click v√†o hint kh√¥ng
        });

    });

    // X·ª≠ l√Ω click ngo√†i v√πng input/hint-container
    document.addEventListener("click", function (event) {
        if (!event.target.closest(".search-container") && !event.target.closest(".hint-item")) {
            document.querySelectorAll(".hint-container").forEach(hint => {
                hint.innerHTML = "";
                hint.style.display = "none";
            });
        }
    });

    // G√°n s·ª± ki·ªán click cho n√∫t t√¨m ki·∫øm
    searchButtons.forEach(button => {
        button.addEventListener("click", function () {
            let searchInput = button.closest(".input-wrapper").querySelector(".search-input");
            if (searchInput) {
                searchItems(searchInput.value);
            }
        });
    });
    
});

/*scroll*/
let lastScrollTop = 0;
const header = document.querySelector('.header');
const mediaQuery = window.matchMedia('(max-width: 1390px)');

function handleScroll() {
    if (mediaQuery.matches) {
        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        if (scrollTop > lastScrollTop) {
            // Scrolling down
            header.classList.add('hide');
        } else {
            // Scrolling up
            header.classList.remove('hide');
        }
        lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
    } else {
        // If not in responsive mode, always show the header
        header.classList.remove('hide');
    }
}

// Listen for scroll events
window.addEventListener('scroll', handleScroll);

// Listen for resize events to handle orientation changes
window.addEventListener('resize', handleScroll);

// Initial call to set the correct state
handleScroll();

// back to top scrolling
window.onscroll = function () {
    toggleBackToTopButton();
};

function toggleBackToTopButton() {
    const backToTopButton = document.getElementById("backToTop");
    if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) {
        backToTopButton.style.display = "block";
    } else {
        backToTopButton.style.display = "none";
    }
}

function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
}


$(document).ready(function(){
    $('.carousel_wrapper').slick({
        dots: true,
        infinite: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        adaptiveHeight: true,
        prevArrow: $('.custom-prev'),
        nextArrow: $('.custom-next'),
        dotsClass: 'carousel-dots',
        responsive: [
            {
                breakpoint: 1197,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    infinite: true,
                    dots: true
                }
            },
            {
                breakpoint: 768,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    dots: true,
                    arrows: false,
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    dots: true,
                    arrows: false
                }
            }
        ]
    });
});
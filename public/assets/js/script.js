function toggleMenu(hamburger) {
    const mobileMenu = document.getElementById('mobileMenu');
    mobileMenu.classList.toggle('active');
    
    // Toggle active class for both hamburger icons
    document.querySelectorAll('.hamburger').forEach(icon => {
        icon.classList.toggle('active');
    });
}

const logo = document.querySelector('.logo');
logo.addEventListener('click', function(e) {

    e.preventDefault();
    window.location.href = 'home'; 
});

function myFunction() {
    const input = document.getElementById('search');
    // Add your search functionality here
}

// H√†m ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√† hi·ªÉn th·ªã l·ªùi ch√†o
function displayWelcomeMessage() {
    // N·∫øu ƒë√£ hi·ªÉn th·ªã l·ªùi ch√†o tr∆∞·ªõc ƒë√≥, kh√¥ng l√†m g√¨ c·∫£
    if (localStorage.getItem("welcomeShown") === "true") {
        return;
    }

    fetch('includes/session.php', {
        method: 'GET',
        credentials: 'include'  // ƒë·∫£m b·∫£o g·ª≠i cookie phi√™n
    })
    .then(response => response.json())
    .then(data => {
        if (data.loggedIn && data.username) {
            const notificate = document.getElementById("notificate");
            const message = document.getElementById("message");

            // Hi·ªÉn th·ªã l·ªùi ch√†o c√° nh√¢n h√≥a d·ª±a tr√™n d·ªØ li·ªáu t·ª´ session.php
            message.innerHTML = `Welcome back, ${data.username}!<br>Have a good day!`;
            notificate.classList.add("show");

            // Sau 2 gi√¢y, ·∫©n th√¥ng b√°o v·ªõi hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông
            setTimeout(() => {
                notificate.classList.remove("show");
                notificate.classList.add("hide");

                // Sau khi animation ho√†n t·∫•t, ·∫©n ho√†n to√†n ph·∫ßn th√¥ng b√°o
                setTimeout(() => {
                    notificate.style.display = "none";
                }, 1000); // th·ªùi gian n√†y c·∫ßn kh·ªõp v·ªõi CSS transition duration
            }, 2000);

            // ƒê√°nh d·∫•u ƒë√£ hi·ªÉn th·ªã l·ªùi ch√†o ƒë·ªÉ l·∫ßn sau kh√¥ng hi·ªÉn th·ªã l·∫°i
            localStorage.setItem("welcomeShown", "true");
        }
    })
    .catch(error => console.error("Error fetching session data:", error));
}



document.addEventListener("DOMContentLoaded", function () {
    const url = new URL(window.location);
    if (url.searchParams.has('term')) {
      url.searchParams.delete('term');
      window.history.replaceState(null, '', url.toString());
    }

    const blurOverlay = document.querySelector(".blur-overlay");
    const btnCart = document.querySelectorAll(".add-to-cart"); // N√∫t th√™m s·∫£n ph·∫©m
    const shoppingCart = document.querySelector(".shopping-cart"); // C·ª≠a s·ªï gi·ªè h√†ng
    const cartBtn = document.getElementById("cart-btn"); // N√∫t m·ªü gi·ªè h√†ng
    const cartBtns = document.querySelectorAll(".sp-cart");
    const closeBtns = document.querySelectorAll(".close");
    const loginBtn = document.getElementById("login-btn");
    const logoutBtn = document.getElementById("logout-btn");
    const cartCounts = document.querySelectorAll(".cart-count");    
    const payButton = document.querySelector(".pay-btn-link");
    const payLink = document.querySelector(".pay-link");

    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p t·ª´ session
    function checkLoginStatus(callback) {
        fetch("includes/session.php", {
            method: "GET",
            credentials: "include"
        })
        .then(response => response.json())
        .then(data => {
            console.log("Session Data:", data);
            if (data.loggedIn) {
                document.body.classList.add("logged-in");
            } else {
                document.body.classList.remove("logged-in");
            }
            updateUI();
            if (callback) callback(data.loggedIn);
        })
        .catch(error => console.error("L·ªói ki·ªÉm tra session:", error));
    }

    // C·∫≠p nh·∫≠t giao di·ªán ƒëƒÉng nh·∫≠p
    function updateUI() {
        const isLoggedIn = document.body.classList.contains("logged-in");
        if (loginBtn) loginBtn.style.display = isLoggedIn ? "none" : "inline-block";
        if (logoutBtn) logoutBtn.style.display = isLoggedIn ? "inline-block" : "none";
    }

    // Khi nh·∫•n n√∫t m·ªü gi·ªè h√†ng
    // if (cartBtn) {
    //     cartBtn.addEventListener("click", () => {
    //         checkLoginStatus((isLoggedIn) => {
    //             if (isLoggedIn) {
    //                 fetchCart(); // Load gi·ªè h√†ng t·ª´ database
    //                 shoppingCart.classList.add("active");
    //                 if (blurOverlay) blurOverlay.classList.add("active");
    //             } else {
    //                 alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng!");
    //                 window.location.href = "login";
    //             }
    //         });
    //     });
    // }

    if (cartBtns.length > 0) {
        cartBtns.forEach(cartBtn => {
            cartBtn.addEventListener("click", () => {
                checkLoginStatus((isLoggedIn) => {
                    if (isLoggedIn) {
                        fetchCart(); // Load gi·ªè h√†ng t·ª´ database
                        shoppingCart.classList.add("active");
                        if (blurOverlay) blurOverlay.classList.add("active");
                    } else {
                        alert("You need to log in to view the cart!");
                        window.location.href = "login";
                    }
                });
            });
        });
    }

    displayWelcomeMessage();

    checkLoginStatus((isLoggedIn)=>{
        if (!isLoggedIn) {
            console.log("Kh√¥ng ƒëƒÉng nh·∫≠p, x√≥a flag welcomeShown");
            localStorage.removeItem("welcomeShown");
            console.log("welcomeShown flag removed:", localStorage.getItem("welcomeShown"));
        }
    });
    
    

    // Khi nh·∫•n n√∫t ƒë√≥ng gi·ªè h√†ng
    closeBtns.forEach(button => {
        button.addEventListener("click", function (event) {
            event.stopPropagation();
            shoppingCart.classList.remove("active");
            if (blurOverlay) blurOverlay.classList.remove("active");
            console.log("ƒê√≥ng gi·ªè h√†ng");
        });
    });
    // document.addEventListener("click", function (event) {
    //     if (event.target.classList.contains("close")) {
    //         shoppingCart.classList.remove("active");
    //         if (blurOverlay) blurOverlay.classList.remove("active");
    //         console.log("ƒê√≥ng gi·ªè h√†ng");
    //     }
    // });
    

    // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (tr√™n trang s·∫£n ph·∫©m)
    btnCart.forEach(button => {
        button.addEventListener("click", function (event) {
            event.stopPropagation();
            checkLoginStatus((isLoggedIn) => {
                if (!isLoggedIn) {
                    alert("You need to log in to add products to the cart!");
                    window.location.href = "login";
                } else {
                    let productId = this.getAttribute("data-id");
                    if (!productId) {
                        alert("Error: Product ID not found!");
                        return;
                    }
                    addToCart(productId);
                }
            });
        });
    });

    // H√†m th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    function addToCart(productId) {
        console.log("ƒêang g·ª≠i request th√™m s·∫£n ph·∫©m:", productId);
        fetch("includes/cart_action.php", {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ action: "add", product_id: parseInt(productId) })
        })
        .then(response => response.json())
        .then(data => {
            console.log("Response t·ª´ server:", data);
            if (data.success) {
                alert("Product has been added to the cart!");
                fetchCart();
                updateCartCount();
            } else {
                alert("Error: " + data.message);
            }
        })
        .catch(error => console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error));
    }

    // H√†m x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    function removeFromCart(productId) {
        fetch("includes/cart_action.php", {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ action: "remove", product_id: productId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                fetchCart();
                updateCartCount();
            } else {
                alert("Error deleting product: " + data.message);
            }
        })
        .catch(error => console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error));
    }

    // üîΩ Gi·∫£m s·ªë l∆∞·ª£ng ho·∫∑c tƒÉng s·ªë l∆∞·ª£ng khi nh·∫•n n√∫t
    function updateQuantity(productId, change) {
        let inputField = document.getElementById(`quantity_${productId}`);
        let newQuantity = parseInt(inputField.value) + change;
    
        if (newQuantity < 1) newQuantity = 1;
    
        inputField.value = newQuantity;
        sendUpdateRequest(productId, newQuantity);
        updateTotalPrice(); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ngay l·∫≠p t·ª©c
    }
    

    // ‚úè Nh·∫≠p tr·ª±c ti·∫øp s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    function updateQuantityDirectly(productId, value) {
        let newQuantity = parseInt(value);
    
        if (isNaN(newQuantity) || newQuantity < 1) {
            newQuantity = 1;
        }
    
        document.getElementById(`quantity_${productId}`).value = newQuantity;
        sendUpdateRequest(productId, newQuantity);
        updateTotalPrice(); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ngay l·∫≠p t·ª©c
    }
    

    // üì° G·ª≠i AJAX c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    function sendUpdateRequest(productId, quantity) {
        fetch("includes/cart_action.php", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({
                action: "update",
                product_id: productId,
                quantity: quantity
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                fetchCart(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch gi·ªè h√†ng
                updateCartCount(); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr√™n icon gi·ªè h√†ng
                updateTotalPrice(); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ngay l·∫≠p t·ª©c
            } else {
                alert("An error occurred while updating the cart!");
            }
        })
        .catch(error => console.error("L·ªói:", error));
    }
    
    function updateTotalPrice() {
        let totalPrice = 0;
        document.querySelectorAll(".cart-item").forEach(item => {
            let price = parseFloat(item.querySelector(".item-price").textContent.replace("‚Ç´", "").replace(",", "").trim());
            let quantity = parseInt(item.querySelector(".quantity-input").value);
            totalPrice += price * quantity;
        });
    
        // C·∫≠p nh·∫≠t v√†o giao di·ªán
        const totalElement = document.querySelector(".cart-total .total-amount");
        if (totalElement) {
            totalElement.textContent = totalPrice.toLocaleString() + " ‚Ç´";
        }
    }
    

    // H√†m l·∫•y danh s√°ch gi·ªè h√†ng
    function fetchCart() {
        fetch("includes/cart.php", {
            method: "GET",
            credentials: "include"
        })
        .then(response => response.text())
        .then(data => {
            console.log("D·ªØ li·ªáu gi·ªè h√†ng nh·∫≠n ƒë∆∞·ª£c:", data);
            const cartContent = document.querySelector(".cart-scroll"); // Ch·ªâ c·∫≠p nh·∫≠t n·ªôi dung s·∫£n ph·∫©m
            if (cartContent) {
                if (data.includes("empty-cart")) { // Ki·ªÉm tra n·∫øu c√≥ n·ªôi dung r·ªóng t·ª´ PHP
                    cartContent.innerHTML = `
                        <div class="emptyCart">
                            <div class="close-icon"> <ion-icon name="alert-circle-outline"></ion-icon> </div>
                            <p class="empty-cart">Your cart is empty.</p>
                        </div>
                    `;
                }
                else {
                    // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m m√† kh√¥ng ·∫£nh h∆∞·ªüng n√∫t ƒë√≥ng
                    cartContent.innerHTML = data;
                }
            } else {
                console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ .cart-content tr√™n trang!");
            }
    
            // Hi·ªÉn th·ªã gi·ªè h√†ng v√† l·ªõp m·ªù n·∫øu ch∆∞a hi·ªÉn th·ªã
            shoppingCart.classList.add("active");
            if (blurOverlay) blurOverlay.classList.add("active");
        })
        .catch(error => console.error("L·ªói khi fetch gi·ªè h√†ng:", error));
    }
    

    // H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr√™n icon gi·ªè h√†ng
    function updateCartCount() {
        fetch("includes/cart_action.php?cart_count=1", {
            method: "GET",
            credentials: "include"
        })
        .then(response => response.json())
        .then(data => {
            console.log("S·ªë l∆∞·ª£ng gi·ªè h√†ng:", data.count);
    
            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng tr√™n t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ hi·ªÉn th·ªã
            document.querySelectorAll(".cart-count").forEach(cartCount => {
                cartCount.textContent = data.count || 0;
            });
    
            // N·∫øu gi·ªè h√†ng c√≥ s·∫£n ph·∫©m, cho ph√©p thanh to√°n
            if (data.count > 0) {
                payButton.removeAttribute("disabled");
                payButton.classList.remove("disabled");
                payLink.classList.remove("disabled-link"); // ƒê·∫£m b·∫£o c√≥ th·ªÉ nh·∫•n
            } else {
                payButton.setAttribute("disabled", "true");
                payButton.classList.add("disabled");
                payLink.classList.add("disabled-link"); // NgƒÉn ƒëi·ªÅu h∆∞·ªõng
            }
        })
        .catch(error => console.error("L·ªói khi l·∫•y s·ªë l∆∞·ª£ng gi·ªè h√†ng:", error));
    }
    
    // NgƒÉn ƒëi·ªÅu h∆∞·ªõng n·∫øu gi·ªè h√†ng r·ªóng
    payLink.addEventListener("click", function(event) {
        if (payButton.hasAttribute("disabled")) {
            event.preventDefault(); // NgƒÉn ch·∫∑n chuy·ªÉn trang
            alert("Your cart is empty. Please add products before proceeding to checkout!");
        }
    });
    

    // Khi trang t·∫£i xong, ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng
    checkLoginStatus();
    updateCartCount();
    window.updateQuantity = updateQuantity;
    window.removeFromCart = removeFromCart;
    window.updateQuantityDirectly = updateQuantityDirectly;
    

    // search product

        // render v√† l·ªçc s·∫£n ph·∫©m
    let itemsPerPage = 8; // S·ªë s·∫£n ph·∫©m m·ªói trang
    let currentPage = 1;
    let selectedCategory = "all"; // M·∫∑c ƒë·ªãnh l√† All

    // function updateProducts() {
    //     // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m trong container
    //     let allProducts = document.querySelectorAll("#product-container .movie-item");
    //     if (allProducts.length === 0) return; // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, d·ª´ng

    //     // ·∫®n t·∫•t c·∫£ s·∫£n ph·∫©m
    //     allProducts.forEach(product => product.style.display = "none");

    //     // L·ªçc s·∫£n ph·∫©m theo danh m·ª•c
    //     let filteredProducts = selectedCategory === "all"
    //         ? allProducts
    //         : document.querySelectorAll(`#product-container .movie-item[data-category="${selectedCategory}"]`);

    //     if (filteredProducts.length === 0) {
    //         console.warn("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o thu·ªôc danh m·ª•c: " + selectedCategory);
    //         return;
    //     }

    //     let totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
    //     if (currentPage > totalPages) currentPage = 1; // N·∫øu v∆∞·ª£t qu√° s·ªë trang, quay v·ªÅ trang ƒë·∫ßu

    //     // Hi·ªÉn th·ªã s·∫£n ph·∫©m c·ªßa trang hi·ªán t·∫°i
    //     filteredProducts.forEach((product, index) => {
    //         product.style.display = (index >= (currentPage - 1) * itemsPerPage && index < currentPage * itemsPerPage) 
    //             ? "block" 
    //             : "none";
    //     });

    //     // C·∫≠p nh·∫≠t giao di·ªán ph√¢n trang
    //     let paginationContainer = document.querySelector(".pagination");
    //     paginationContainer.innerHTML = ""; // X√≥a ph√¢n trang c≈©

    //     if (totalPages > 1) { // T·∫°o n√∫t ph√¢n trang n·∫øu c√≥ h∆°n 1 trang
    //         for (let i = 1; i <= totalPages; i++) {
    //             let button = document.createElement("button");
    //             button.className = "page-link";
    //             button.innerText = i;
    //             button.dataset.page = i;
    //             if (i === currentPage) button.classList.add("active");
    //             paginationContainer.appendChild(button);
    //         }
    //     }
    // }

    // // X·ª≠ l√Ω s·ª± ki·ªán khi b·∫•m v√†o n√∫t ph√¢n trang
    // const pagination = document.querySelector(".pagination");
    // if (pagination) {
    //     pagination.addEventListener("click", function (event) {
    //         if (event.target.tagName === "BUTTON") {
    //             currentPage = parseInt(event.target.dataset.page);
    //             updateProducts();
    //         }
    //     });
    // }
    
    // X·ª≠ l√Ω s·ª± ki·ªán l·ªçc s·∫£n ph·∫©m khi thay ƒë·ªïi radio input
    document.querySelectorAll(".nav-item").forEach(item => {
        item.addEventListener("click", () => {
            const category = item.textContent.trim().toLowerCase();
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set('category', category);
            urlParams.set('page', '1'); // Reset trang v·ªÅ 1 khi ƒë·ªïi filter
            window.location.search = urlParams.toString();
        });
    });
    

    // C·∫≠p nh·∫≠t class active cho navigation (d√†nh cho nh√£n)
    document.querySelectorAll(".nav-item").forEach(label => {
        label.addEventListener("click", function () {
            document.querySelectorAll(".nav-item").forEach(l => l.classList.remove("active"));
            this.classList.add("active");
        });
    });


      

    // updateProducts(); // Ch·∫°y l·∫ßn ƒë·∫ßu khi trang t·∫£i

    // test fetch s·∫£n ph·∫©m 
    const searchTerm = 'm';
    const urll = `pages/getAllProduct.php?term=${encodeURIComponent(searchTerm)}`;
    console.log('Fetching:', urll); // Ki·ªÉm tra URL

    fetch(urll)
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error('Error:', error));

    // X·ª≠ l√Ω g·ªçi s·∫£n ph·∫©m t·ª´ server
    // X√≥a d·∫•u ti·∫øng Vi·ªát
function removeVietnameseTones(str) {
    return str.normalize("NFD")
              .replace(/[\u0300-\u036f]/g, "")
              .replace(/ƒë/g, "d")
              .replace(/ƒê/g, "D");
}

// Hi·ªÉn th·ªã g·ª£i √Ω t√¨m ki·∫øm (autocomplete)
function showHints(inputField) {
    const rawInput = inputField.value.trim();
    const searchTerm = removeVietnameseTones(rawInput.toLowerCase());
    const hintContainer = inputField.closest(".search-container").querySelector(".hint-container");

    if (!searchTerm) {
        hintContainer.innerHTML = "";
        hintContainer.style.display = "none";
        return;
    }

    fetch(`pages/getAllProduct.php?term=${encodeURIComponent(searchTerm)}`)
        .then(response => response.json())
        .then(products => {
            hintContainer.innerHTML = "";

            if (!products || products.length === 0) {
                const notFoundItem = document.createElement("div");
                notFoundItem.className = "hint-item";
                notFoundItem.textContent = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m";
                notFoundItem.style.textAlign = "center";
                notFoundItem.style.padding = "8px";
                notFoundItem.style.color = "#999";
                hintContainer.appendChild(notFoundItem);
                hintContainer.style.display = "block";
                return;
            }

            products.forEach(item => {
                const hintItem = document.createElement("div");
                hintItem.className = "hint-item";
                hintItem.dataset.productId = item.product_id;
                hintItem.innerHTML = `
                    <img src="${item.image}" alt="${item.product_name}" 
                         style="width:30px; height:30px; margin-right:10px; vertical-align:middle;">
                    ${item.product_name}
                `;

                hintItem.addEventListener("mousedown", e => e.preventDefault()); // ngƒÉn m·∫•t focus
                hintItem.addEventListener("click", () => {
                    window.location.href = `home?pages=product&id=${item.product_id}`;
                });

                hintContainer.appendChild(hintItem);
            });

            hintContainer.style.display = "block";
        })
        .catch(error => console.error("L·ªói khi l·∫•y g·ª£i √Ω:", error));
}


    const searchInputs = document.querySelectorAll(".search-input");
    const searchButtons = document.querySelectorAll(".searchBtn");

    // G·ª£i √Ω s·∫£n ph·∫©m
    function showHints(inputField) {
        const rawInput = inputField.value.trim();
        const searchTerm = removeVietnameseTones(rawInput.toLowerCase());

        const hintContainer = inputField.closest(".search-container").querySelector(".hint-container");
        if (!hintContainer) return;

        if (!searchTerm) {
            hintContainer.innerHTML = "";
            hintContainer.style.display = "none";
            return;
        }

        fetch(`pages/getAllProduct.php?term=${encodeURIComponent(searchTerm)}`)
            .then(response => response.json())
            .then(products => {
                hintContainer.innerHTML = "";

                if (!products || products.length === 0) {
                    const notFoundItem = document.createElement("div");
                    notFoundItem.className = "hint-item";
                    notFoundItem.textContent = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m";
                    notFoundItem.style.textAlign = "center";
                    notFoundItem.style.padding = "8px";
                    notFoundItem.style.color = "#999";
                    hintContainer.appendChild(notFoundItem);
                    hintContainer.style.display = "block";
                    return;
                }

                products.forEach(item => {
                    const hintItem = document.createElement("div");
                    hintItem.className = "hint-item";
                    hintItem.dataset.productId = item.product_id;
                    hintItem.innerHTML = `
                        <img src="${item.image}" alt="${item.product_name}" 
                            style="width:30px; height:30px; margin-right:10px; vertical-align:middle;">
                        ${item.product_name}
                    `;

                    hintItem.addEventListener("mousedown", (e) => {
                        e.preventDefault(); // gi·ªØ focus
                        isSelectingHint = true;
                    });

                    hintItem.addEventListener("click", () => {
                        window.location.href = `home?pages=product&id=${item.product_id}`;
                    });

                    hintContainer.appendChild(hintItem);
                });

                hintContainer.style.display = "block";
            })
            .catch(error => {
                console.error("L·ªói khi l·∫•y g·ª£i √Ω:", error);
            });
    }

    function removeVietnameseTones(str) {
        return str.normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "")
            .replace(/ƒë/g, "d")
            .replace(/ƒê/g, "D");
    }

    let inputTimeout = null;
    let isSelectingHint = false;
    let lastInputValue = "";
    
    searchInputs.forEach(input => {
        // Khi g√µ ti·∫øng Vi·ªát b·∫±ng IME
        input.addEventListener("compositionend", function () {
            lastInputValue = this.value.trim();
        });
    
        input.addEventListener('input', function () {
            const hintContainer = this.closest(".search-container").querySelector(".hint-container");
            if (!hintContainer) return;
    
            const value = this.value.trim();
            lastInputValue = value;
    
            // H·ªßy timeout tr∆∞·ªõc n·∫øu c√≥
            if (inputTimeout) clearTimeout(inputTimeout);
    
            if (value === '') {
                hintContainer.innerHTML = '';
                hintContainer.style.display = 'none';
    
                // X√≥a term kh·ªèi URL & reload trang
                const url = new URL(window.location);
                url.searchParams.delete('term');
                url.searchParams.set('page', 1);
                window.location.href = url.toString();
                return;
            }
    
            // Ch·ªù 500ms r·ªìi m·ªõi fetch hint
            inputTimeout = setTimeout(() => {
                showHints(input);
            }, 500);
        });
    
        input.addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
    
                const raw = lastInputValue || this.value.trim();
                if (raw) {
                    const term = encodeURIComponent(raw);
                    window.location.href = `?term=${term}&page=1`;
                }
            }
        });
    
        input.addEventListener("blur", function () {
            setTimeout(() => {
                if (!isSelectingHint) {
                    const hintContainer = this.closest(".search-container").querySelector(".hint-container");
                    if (hintContainer) hintContainer.style.display = "none";
                }
                isSelectingHint = false;
            }, 200);
        });
    });
    
    // Ghi l·∫°i tr·∫°ng th√°i khi click v√†o g·ª£i √Ω
    document.addEventListener("mousedown", e => {
        if (e.target.closest(".hint-item")) {
            isSelectingHint = true;
        }
    });
    
    
    // Ghi l·∫°i tr·∫°ng th√°i khi click v√†o hint
    document.addEventListener("mousedown", e => {
        if (e.target.closest(".hint-item")) {
            isSelectingHint = true;
        }
    });
    
    // ·∫®n g·ª£i √Ω n·∫øu click ngo√†i v√πng t√¨m ki·∫øm
    document.addEventListener("click", function (event) {
        if (!event.target.closest(".search-container") && !event.target.closest(".hint-item")) {
            document.querySelectorAll(".hint-container").forEach(hint => {
                hint.innerHTML = "";
                hint.style.display = "none";
            });
        }
    });
    
    // X·ª≠ l√Ω n√∫t t√¨m ki·∫øm
    searchButtons.forEach(button => {
        button.addEventListener("click", function () {
            const searchInput = button.closest(".input-wrapper").querySelector(".search-input");
            if (searchInput) {
                const raw = searchInput.value.trim();
                if (raw) {
                    const term = encodeURIComponent(raw);
                    window.location.href = `?term=${term}&page=1`;
                }
            }
        });
    });
    


    
});

/*scroll*/
let lastScrollTop = 0;
const header = document.querySelector('.header');
const mediaQuery = window.matchMedia('(max-width: 1390px)');

function handleScroll() {
    if (mediaQuery.matches) {
        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        if (scrollTop > lastScrollTop) {
            // Scrolling down
            header.classList.add('hide');
        } else {
            // Scrolling up
            header.classList.remove('hide');
        }
        lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
    } else {
        // If not in responsive mode, always show the header
        header.classList.remove('hide');
    }
}

// Listen for scroll events
window.addEventListener('scroll', handleScroll);

// Listen for resize events to handle orientation changes
window.addEventListener('resize', handleScroll);

// Initial call to set the correct state
handleScroll();

// back to top scrolling
window.onscroll = function () {
    toggleBackToTopButton();
};

function toggleBackToTopButton() {
    const backToTopButton = document.getElementById("backToTop");
    if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) {
        backToTopButton.style.display = "block";
    } else {
        backToTopButton.style.display = "none";
    }
}

function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
}


$(document).ready(function(){
    $('.carousel_wrapper').slick({
        dots: true,
        infinite: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        adaptiveHeight: true,
        prevArrow: $('.custom-prev'),
        nextArrow: $('.custom-next'),
        dotsClass: 'carousel-dots',
        responsive: [
            {
                breakpoint: 1197,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    infinite: true,
                    dots: true
                }
            },
            {
                breakpoint: 768,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    dots: true,
                    arrows: false,
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    dots: true,
                    arrows: false
                }
            }
        ]
    });
});
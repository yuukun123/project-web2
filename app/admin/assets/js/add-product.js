document.addEventListener('DOMContentLoaded', function() {
    const save = document.querySelector('.save'); // N√∫t l∆∞u
    const blurOverlay = document.querySelector('.blur-overlay');
    const save_suc = document.querySelector('.save-success');
    const close = document.querySelector('.close');
    const fileInput = document.getElementById("fileInput")
    const categorySelect = document.getElementById("category");
    
    // Bi·∫øn flag ƒë·ªÉ ngƒÉn double submit
    let isSubmitting = false;

    // B·∫Øt s·ª± ki·ªán khi ·∫•n n√∫t "Save"
    save.addEventListener('click', function(event) {
        event.preventDefault(); // NgƒÉn ch·∫∑n load l·∫°i trang
        
        // N·∫øu ƒëang g·ª≠i, kh√¥ng th·ª±c hi·ªán l·∫°i
        if(isSubmitting) return;
        isSubmitting = true;

        // L·∫•y d·ªØ li·ªáu t·ª´ form
        let name = document.getElementById("name").value.trim();
        let price = document.getElementById("price").value.trim();
        let status = document.getElementById("status").value.trim();
        let category = document.getElementById("category").value.trim();
        let size = document.getElementById("size").value.trim();
        let ingredient = document.getElementById("ingredient").value.trim();
        let imagePath = document.getElementById("filePath").value.trim();
        let expirationDate = document.getElementById("expiration_date").value.trim();
        let storage = document.getElementById("storage").value.trim();
        // Ki·ªÉm tra gi√° tr·ªã c·ªßa gi√° tr·ªã ƒë√£ nh·∫≠p
        if (!/^\d+(\.\d{1,2})?$/.test(price)) {
            alert("ÔøΩÔøΩÔøΩÔ∏è Price must be a valid number (e.g., 12.34)");
            isSubmitting = false;  // reset flag
            return;
        }
        
        if (!expirationDate) {
            alert("‚ö†Ô∏è Please select an expiration date!");
            isSubmitting = false;  // reset flag
            return;
        }
        
        // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ng√†y th√°ng ki·ªÉu TEXT (YYYY-MM-DD)
        let expirationDateText = expirationDate; 

        // In ra console ƒë·ªÉ debug
        console.log("üìå D·ªØ li·ªáu nh·∫≠p v√†o:");
        console.log("üõí Name:", name);
        console.log("üí≤ Price:", price);
        console.log("üìå Status:", status);
        console.log("üìÅ Category:", category);
        console.log("üìè Size:", size);
        console.log("üìÉ Ingredient:", ingredient);
        console.log("üìÖ Expiration Date:", expirationDate);
        console.log("üè† Storage:", storage);
        console.log("üñº Image Path:", imagePath);

        // Ki·ªÉm tra n·∫øu c√≥ tr∆∞·ªùng n√†o b·ªã thi·∫øu
        if (!name || !price || !status || !category || !size || !imagePath) {
            alert("‚ö†Ô∏è Please fill in all the information!");
            isSubmitting = false;  // reset flag
            return;
        }

        // T·∫°o object d·ªØ li·ªáu g·ª≠i ƒëi
        let formData = new FormData();
        formData.append("name", name);
        formData.append("price", price);
        formData.append("status", status);
        formData.append("category", category);
        formData.append("size", size);
        formData.append("ingredient", ingredient);
        formData.append("expiration_date", expirationDateText); // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ki·ªÉu TEXT
        formData.append("storage", storage); // N·∫øu c·∫ßn thi·∫øt
        formData.append("image", imagePath);

        // G·ª≠i request AJAX ƒë·ªÉ l∆∞u s·∫£n ph·∫©m
        fetch("Controllers/add-product-process.php", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            console.log("üìå Ph·∫£n h·ªìi t·ª´ server:", data); // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ server

            if (data.success) {
                // Hi·ªÉn th·ªã popup th√†nh c√¥ng
                save_suc.classList.add('active-popup');
                blurOverlay.classList.add('active');
                
                // Hi·ªÉn th·ªã th√¥ng b√°o
                alert("‚úÖ Product added successfully.!");
                
                // Reset form sau khi l∆∞u
                let form = document.getElementById("add-product-form"); // üîπ ƒê√∫ng ID c·ªßa form
                if (form) {
                    form.reset();
                } else {
                    console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y form v·ªõi ID 'add-product-form'.");
                }                

            } else {
                alert("‚ùå Error saving product: " + data.message);
            }
        })
        .catch(error => {
            console.error("‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu:", error);
            alert("‚ùå An error occurred! Please try again.");
        })
        .finally(() => {
            // Reset l·∫°i flag sau khi ho√†n th√†nh g·ª≠i
            isSubmitting = false;
        });
    });

    // ƒê√≥ng popup khi b·∫•m n√∫t close
    close.addEventListener('click', function(event) {
        event.stopPropagation();
        save_suc.classList.remove('active-popup');
        blurOverlay.classList.remove('active');
    });
    
    const addCategory = document.querySelector('.add-category');
    const addStatus = document.querySelector('.add-status');
    
    addCategory.addEventListener('click', function(event) {
        event.preventDefault();
        alert("This function is still under development")
    });
    
    addStatus.addEventListener('click', function(event) {
        event.preventDefault();
        alert("This function is still under development")
    });

    // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc theo database
    let sizeSelect = document.getElementById("size");

    // X√≥a d·ªØ li·ªáu c≈© v√† gi·ªØ l·∫°i option m·∫∑c ƒë·ªãnh
    sizeSelect.innerHTML = '<option selected="selected">--Select size--</option>';

    // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch size
    fetch("Api_php/get-size.php")
        .then(response => response.json())
        .then(data => {
            console.log("üìå D·ªØ li·ªáu t·ª´ API:", data); // Ki·ªÉm tra d·ªØ li·ªáu API

            // Ki·ªÉm tra d·ªØ li·ªáu c√≥ ƒë√∫ng l√† m·∫£ng kh√¥ng
            if (!Array.isArray(data)) {
                console.error("‚ùå API kh√¥ng tr·∫£ v·ªÅ m·∫£ng h·ª£p l·ªá:", data);
                return;
            }

            // Th√™m d·ªØ li·ªáu v√†o <select>
            data.forEach(item => {
                console.log("üßê Ki·ªÉm tra t·ª´ng ph·∫ßn t·ª≠:", item); // Debug t·ª´ng ph·∫ßn t·ª≠

                if (!item.size_id || !item.size_name) {
                    console.warn("‚ö†Ô∏è D·ªØ li·ªáu b·ªã thi·∫øu ho·∫∑c sai:", item);
                    return;
                }

                let option = document.createElement("option");
                option.value = item.size_id;  
                option.textContent = item.size_name;
                sizeSelect.appendChild(option);
            });

            console.log("‚úÖ D·ªØ li·ªáu ƒë√£ hi·ªÉn th·ªã tr√™n select.");
        })
        .catch(error => console.error("‚ùå L·ªói khi g·ªçi API:", error));
    
    
    // ƒê∆∞·ªùng d·∫´n ·∫£nh
    fileInput.addEventListener("change", function (event) {

        // Ki·ªÉm tra l·∫°i l·∫ßn n·ªØa n·∫øu c√≥ thay ƒë·ªïi trong category
        // Ki·ªÉm tra n·∫øu category v·∫´n l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh "--Select category--"
        if (!categorySelect.value || categorySelect.value === "--Select category--") {
            alert("‚ö†Ô∏è Please select a category before uploading an image!");
            fileInput.value = "";  // Reset l·∫°i gi√° tr·ªã file input
            return;
        }

        previewImage(event);  // üëâ G·ªçi h√†m preview
    
        let file = this.files[0];
    
        let formData = new FormData();
        formData.append("file", file);
        formData.append("category", categorySelect.value);
    
        fetch("Api_php/upload-img.php", {
            method: "POST",
            body: formData,
        })
        .then(response => response.json())
        .then(data => {
            console.log(data);
            if (data.success) {
                // ‚úÖ Ch·ªâ g√°n v√†o input #filePath
                let filePathInput = document.getElementById("filePath");
                filePathInput.value = data.filePath;
            } else {
                alert("‚ùå Upload failed: " + data.error);
            }
        })
        .catch(error => console.error("‚ùå L·ªói khi upload ·∫£nh:", error));
    });
    
    function previewImage(event) {
        const file = event.target.files[0];
        const preview = document.getElementById('imagePreview');
        const filePathInput = document.getElementById('filePath');
        
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                preview.src = e.target.result;
                preview.style.display = 'block';
            }
            reader.readAsDataURL(file);
            filePathInput.value = file.name;
        } else {
            preview.src = '';
            preview.style.display = 'none';
            filePathInput.value = '';
        }
    }

    // X√≥a d·ªØ li·ªáu khi form reset
    const form = document.getElementById("add-product-form");  // ÔøΩÔøΩ ƒê√∫ng ID c·ªßa form
    form.addEventListener("reset", function() {
        const preview = document.getElementById('imagePreview');
        preview.src = '';
        preview.style.display = 'none';
    
        // C≈©ng n√™n x√≥a ƒë∆∞·ªùng d·∫´n trong input filePath:
        document.getElementById('filePath').value = '';
    });
    
    document.getElementById('expiration_date').setAttribute('min', new Date().toISOString().split('T')[0]);

});
